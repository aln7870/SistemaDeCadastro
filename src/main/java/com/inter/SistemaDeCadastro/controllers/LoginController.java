package com.inter.SistemaDeCadastro.controllers;

import com.inter.SistemaDeCadastro.controllers.dtos.LoginRequest;
import com.inter.SistemaDeCadastro.controllers.dtos.LoginResponse;
import com.inter.SistemaDeCadastro.interfaces.UserRepository;
import com.inter.SistemaDeCadastro.models.RoleModel;
import com.inter.SistemaDeCadastro.models.UserModel;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.jwt.JwtClaimsSet;
import org.springframework.security.oauth2.jwt.JwtEncoder;
import org.springframework.security.oauth2.jwt.JwtEncoderParameters;
import org.springframework.web.bind.annotation.*;

import java.time.Instant;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/login")
@CrossOrigin("*")
public class LoginController {
    @Autowired
    JwtEncoder jwtEncoder;
    @Autowired
    UserRepository userRepository;
    @Autowired
    PasswordEncoder passwordEncoder;


    @PostMapping
    public ResponseEntity<LoginResponse> login(@RequestBody @Valid LoginRequest loginRequest) {

        Optional<UserModel> user = userRepository.findByNome(loginRequest.nome());

        if (user.isEmpty()) {
            throw new BadCredentialsException("usuario vazio");
        }

        if (!passwordEncoder.matches(loginRequest.senha(), user.get().getSenha())) {
            throw new BadCredentialsException("senha incorreta");
        }

        var now = Instant.now(); // horario atual
        var expiresIn = 1200L;   //20 minutos
        var scope = user.get().getRoles()
                .stream()
                .map(RoleModel::getNome)
                .collect(Collectors.joining());

        var claims = JwtClaimsSet.builder()
                .issuer("generated by back-end")
                .subject(user.get().getIdUsuario().toString())
                .issuedAt(now)
                .expiresAt(now.plusSeconds(expiresIn))
                .claim("scope", scope) //listando as roles do usuario
                .build();

        var jwtValue = jwtEncoder.encode(JwtEncoderParameters.from(claims)).getTokenValue();

        return ResponseEntity.ok(new LoginResponse(jwtValue, expiresIn));
    }

}
